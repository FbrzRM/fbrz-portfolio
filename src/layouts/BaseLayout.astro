---
import { ViewTransitions } from 'astro:transitions';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

interface Props{
    title: string;
    description : string;
}

const {title, description} = Astro.props;
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="rocket.svg" />
		<meta name="generator" content={Astro.generator} />
		<ViewTransitions/>
		<title>{title}</title>
		<!-- Normalize -->
		<link rel="stylesheet" href="/public/styles/normalize.css">
		<!-- fonts -->
		<!-- CSS -->
		<meta name="description" content={description}>
	</head>
	<body>
		<Header></Header>
		<slot />
		<Footer></Footer>
	</body>
</html>

<style is:global>
	:root {
		/* Colors */
		--white: #ffffff;
		--black: #0006;
		--gray: #fff2;
		--bg-color: #171c33;
		--primary:#0075bb;
		--secondary: #008fd8;

		/* Font */
		--font-heading: system-ui, sans-serif;
		--font-text: monospace;
		--font-size-h4: clamp(0.77rem, 0.74vw + 0.59rem, 1.18rem);
		--font-size-h3: clamp(2.2rem, 4.09vw + 0.23rem, 3.5rem);
		--font-size-h2: clamp(2.02rem, 1.95vw + 1.54rem, 3.09rem);
		--font-size-h1: clamp(3.27rem, 3.15vw + 2.49rem, 5rem);
	}
	html {
		box-sizing: border-box;
		font-size: 62.5%;
		color-scheme: dark light;
		scroll-behavior: smooth;
	}

	*, *::before, *::after{
		box-sizing: inherit;
	}

	body{
		font-size: 1.6rem;
		font-family: var(--font-text);
		background-color: var(--bg-color);
		background-image: url("https://www.transparenttextures.com/patterns/stardust.png");
	}

	h1{
		font-size: var(--font-size-h1);
	}

	h2{
		font-size: var(--font-size-h2);
	}

	h3{
		font-size: var(--font-size-h3);
	}

	h1, h2{
		font-family: var(--font-heading);
		color: var(--white);
		text-align: center;
	}

	.uppercase{
		text-transform: uppercase;
	}

	h3{
		margin: .5rem 0;
		color: var(--secondary);
	}

	a{
		font-size: clamp(1.56rem, 1.7vw + 1.14rem, 2.5rem);
		color: var(--white);
		text-decoration: none;
	}

	p{
		font-size: clamp(1.6rem, 1.64vw + 1.19rem, 2rem);
	}

	@media (min-width: 768px) {
		p{
			line-height: 1.2;
		}
	}


	img{
		max-width: 100%;
		display: block;
	}

	ul{
		margin: 0;
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.container{
		width: min(90%, 160rem);
		margin: 0 auto;
	}

	/* Animaciones */
	.flotate {
		animation: float 8s linear infinite, blink 3s ease-in-out infinite;
		transform-origin: center;
    }

	.float{
		animation: float 8s linear infinite;
	}

	.rotateBlink{
		animation: float 8s linear infinite, blink 3s ease-in-out infinite, rotateY 8s linear infinite;
		filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.8));
	}

	.blink{
		animation: blink 3s ease-in-out infinite;
		filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.8));
	}

	.rotateX{
		animation: rotateX 9s linear infinite;
	}

	.scale{
		animation: scale 8s linear infinite;
	}

    @keyframes float {
        0% {
            transform: translateY(-1.5rem);
        }
        50% {
            transform: translateY(1.5rem);
        }
        100% {
            transform: translateY(-1.5rem);
        }
    }

	@keyframes rotateY {
        0% {
            transform: rotate(0deg) translateY(-1rem);
        }
        50% {
            transform: rotate(180deg) translateY(1rem);
        }
        100% {
            transform: rotate(360deg) translateY(-1rem);
        }
    }

	@keyframes rotateX {
		0% {
            transform: rotate(0deg) translateY(-.5rem);
        }
        25% {
            transform: rotate(10deg) translateY(0rem);
        }
        50% {
            transform: rotate(0deg) translateY(1rem);
        }
        75% {
            transform: rotate(-25deg) translateY(0rem);
        }
		100%{
			transform: rotate(0deg) translateY(-.5rem);
		}
	}

    @keyframes blink {
        0% {
            opacity: 0.8;
        }
        50% {
            opacity: 0.4;
        }
        100% {
            opacity: 0.8;
        }
    }

	@keyframes scale{
		0%{
			transform: scale(0.5) rotate(0deg);
		}
		50%{
			transform: scale(1) rotate(180deg);
		}
		100%{
			transform: scale(0.5) rotate(360deg);
		}
	}

</style>